/**
 * 特性改動與類別
 */
import invoices from './invoices.json' with { type: "json" };
import plays from './plays.json' with { type: "json" };

import { statement, htmlStatement } from './index05/statement.js'


const result = statement(invoices[0], plays)
const resultHtml = htmlStatement(invoices[0], plays)

console.log(result)
console.log(resultHtml)

/**
 * 在此上述的程式碼中，總結三個比較重要的節點。
 * 1. 將原函式分解成一組嵌套的函數，應用拆分階段
 * 2. 分離計算邏輯與輸出格式化邏輯
 * 3. 為計算器引入多態性來處理計算邏輯
 * 每一步都給程式碼添加了更多的結構，這樣可以更容易地理解和維護程式碼。
 */

/**
 * 一般來說，重構早期的主要動力是嘗試理解程式碼如何工作。通常你需要先通讀程式碼，找到一些感覺，
 * 然後再通過重構將這些感覺從腦海裡搬回程式碼中。清晰的程式碼更容易理解，使你能夠發現更深層次的設計問題。
 * 從而形成積極正向的循環。
 * 
 * 在過程裡我們談的是如何改善程式碼，但什麼樣的程式碼才算是好的程式碼呢？
 * 我偏愛小的、命名良好的函式，也有人反對這個觀點，認為這樣會導致函式數量過多，難以管理。
 * 如果我們只關乎美學，只是各花入各眼，沒有好壞之分。那除了訴諸個人品味，就沒有任何客觀事實依據了。
 * 但我堅信，好的程式碼應該是易於理解的。這意味著它應該有清晰的結構，易於閱讀和維護。有人需要修改它時，
 * 他們應該能夠快速理解程式碼的意圖和邏輯。
 * 
 * 一個健康的程式碼庫應該是易於維護的，這意味著它應該有良好的結構和清晰的邏輯。這樣可以減少錯誤的發生，
 * 並且使得程式碼更容易擴展和修改。
 */

/**
 * 決定程式好壞的關鍵在於它有多麼容易被修改。
 */

/**
 * 這個範例告訴我們最重要的一點就是重構的節奏感。無論何時，當我向人們展示我如何重構時，無人不訝異我的步伐之小。
 * 並且每一步都能保證程式碼在重構過程中始終保持可運行(編譯通過和測試通過)狀態。
 */

/**
 * 關鍵心得是: 小的步驟可以更快前進，請保持程式碼永遠處於可工作狀態，小步修改累積起來也能大大改善系統的設計，
 * 請記住這一點，此外僅於沉默而已(無須多言)。
 */